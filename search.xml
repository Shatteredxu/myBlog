<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[求最大公约数和最小公倍数的几种方法]]></title>
    <url>%2F2017%2F12%2F11%2F%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[第一种方法：暴力枚举法12345678910111213141516171819// 给定两个数求算法的最大公约数// 一：暴力枚举法function getmaxDivisor(a,b)&#123; if(a&lt;b)&#123; var tmp = b b = a a = tmp &#125;else&#123; for(var i = b ;i&gt;0;i--)&#123; if(a%i==0&amp;b%i==0)&#123; console.log("最大公约数为",i) break; &#125; &#125; &#125;&#125;console.time("暴力枚举法")getmaxDivisor(350,15)console.timeEnd("暴力枚举法") 该方法简单，效率比较低，需要把两个数相对较小的那个数到他的最大公约数都遍历一遍，于是就有了第二种方法欧几里得算法（Euclidean algorithm） 第二种方法：辗转相除法（欧几里得算法（Euclidean algorithm））该算法基于一条定理：两个正整数a,b(a&gt;b),他们的最大公约数等于b与a%b的最大公约数 通过这一条定理我们就可以用递归的方法来求最大公约数，当a%b取余为0时 余数就为b 12345678910111213141516//二：辗转相除法function getmaxDivisor(a,b)&#123; console.time("辗转相除法") if(a&lt;b)&#123; var tmp = b b = a a = tmp &#125; if(a%b)&#123; getmaxDivisor(b,a%b) &#125;else&#123; console.log("最大公约数为",b) &#125;&#125;getmaxDivisor(35,150000)console.timeEnd('辗转相除法') 辗转相除法的优点：该算法能够较为快速的求解最大公约数。缺点：a对b取模运算性能较低． 第三种方法：更像减损术(出自九章算术)该算法也是使用了递归的思想 将a与b的最大公约数转化为b和a-b的最大公约数 知道a-b=0 则最大公约数为b算法步骤： 第一步：任意给定两个正整数；判断它们是否都是偶数。若是，则用2约简；若不是则执行第二步。 第二步：以较大的数减较小的数，接着把所得的差与较小的数比较，并以大数减小数。继续这个操作，直到所 得的减数和差相等为止。 则第一步中约掉的若干个2与第二步中等数的乘积就是所求的最大公约数。其中所说的“等数”，就是最大公约数。求“等数”的办法是“更相减损”法。 1234567891011121314151617// 一：更像减损术function getmaxDivisor(a,b)&#123; if(a&lt;b)&#123; var tmp = b b = a a = tmp &#125; if if(a-b)&#123; getmaxDivisor(b,a-b) &#125;else&#123; console.log("最大公约数为",b) &#125;&#125;console.time("更像减损术")getmaxDivisor(35,150000)console.timeEnd('更像减损术') 但是该算法不稳定，当a与b相差悬殊的时候 ，该算法效率很低。 第四种方法 ：更相减损术与移位运算结合 介绍一下移位运算：&nbsp;&nbsp;&nbsp;&nbsp;在数字没有溢出的前提下，对于正数和负数，左移一位都相当于乘以2的1次方，左移n位就相当于乘以2的n次方；右移一位相当于除2，右移n位相当于除以2的n次方。比如 数字11的二进制形式为 0000 0000 0000 1011 将他左移一位 即11&gt;&gt;1 结果为 0000 0000 0001 0110 ，结果为 25+23+22 = 22 ,所以左移n位相当于乘以2n 移位运算为什么快？&nbsp;&nbsp;左移、右移其实是做乘以2或者除以2的过程,但这是利用二进制的基本特点实现的,即小数点左移或右移数据变小或变大二进制的10倍,及十进制的2倍.这个指令在硬件上仅仅需要一步（时钟步）就可以实现.而乘除法实际上是通过多次加减法来实现的,在硬件上需要多步（时钟步）才能实现,这样就需要更多的时间.如果有兴趣,翻一翻微机原理中关于每一步指令的执行周期图就能够看出来哪个指令长哪个指令短.所以在通常情况下，移位运算比乘除运算快 接着说怎样将更相减损术和移位运算结合使用&nbsp;&nbsp;&nbsp;&nbsp;九章算术原文中多了一步验证：如果两数都是偶数，计算差值之前会首先让两个数都折半，使得计算次数更少。这种方法做到了部分优化，但古人似乎没想到一奇一偶的情况也是可以优化的。所以一般该算法的步骤为： 当a和b均为偶数，gcb(a,b) = 2gcb(a/2, b/2) = 2gcb(a&gt;&gt;1, b&gt;&gt;1) 当a为偶数，b为奇数，gcb(a,b) = gcb(a/2, b) = gcb(a&gt;&gt;1, b) 当a为奇数，b为偶数，gcb(a,b) = gcb(a, b/2) = gcb(a, b&gt;&gt;1) 当a和b均为奇数，利用更相减损术运算一次，gcb(a,b) = gcb(b, a-b)， 此时a-b必然是偶数，又可以继续进行移位运算。123456789101112131415161718192021222324252627// 一：更像减损术+移位运算function getmaxDivisor(a, b) &#123; if (a &lt; b) &#123; var tmp = b b = a a = tmp &#125; else if (a == b) &#123; console.log("最大公约数为", b) &#125; else &#123; if (!(a &amp; 1) &amp;&amp; !(b &amp; 1)) &#123; a = a &gt;&gt; 1 b = b &gt;&gt; 1 getmaxDivisor(b, a - b) &#125; else if (!(a &amp; 1) &amp; b &amp; 1) &#123; a = a &gt;&gt; 1 getmaxDivisor(b, a - b) &#125; else if ((a &amp; 1) &amp; !b &amp; 1) &#123; b = b &gt;&gt; 1 getmaxDivisor(b, a - b) &#125; else &#123; getmaxDivisor(b, a - b) &#125; &#125;&#125;console.time("更像减损术+移位运算")getmaxDivisor(350, 15)console.timeEnd('更像减损术+移位运算') 上面代码使用了a&amp;1来判断a是否为偶数 相当于 a%2a &amp; 1 是取 X 二进制数 的最低位.X 为偶数,最低位 0,X 为奇数,最低位 1.a%2 – 除法取余数运算,X 为偶数 余数为 0, X 为奇数 余数为 1.所以 表达式 成立.(a&amp;1)==(a%2) 为真.]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[科学上网]]></title>
    <url>%2F2017%2F12%2F10%2F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[啊实打实大]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js中的广度优先遍历（BFS）和深度优先遍历（DFS）]]></title>
    <url>%2F2017%2F12%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[对于下面这段html代码,要求打印出每个节点的标签名和类名：1234567891011&lt;div id=&apos;root&apos;&gt; &lt;span&gt;123 &lt;a href=&quot;#&quot;&gt; sdsd &lt;/a&gt; &lt;div&gt;sdsd&lt;a&gt;这是一个a标签&lt;/a&gt;&lt;/div&gt; &lt;/span&gt; &lt;span&gt;456 &lt;p&gt;这是一个p标签&lt;/p&gt; &lt;/span&gt; &lt;/div&gt; 深度优先遍历当使用深度优先遍历算法实现的时候结果一般为该算法先将当前结点的孩子全部遍历结束，在遍历同一级的节点如图所示：先将2节点下的子节点遍历完，如果3号，4号 有子节点则再继续遍历该节点下的子节点，否则将遍历2节点的兄弟节点，直到遍历结束 下面给出该算法的js实现： （1）这是深度优先算法的递归实现123456789101112function deepTraversal(node,nodeList) &#123; if (node) &#123; nodeList.push(node); var children = node.children; for (var i = 0; i &lt; children.length; i++) //每次递归的时候将 需要遍历的节点 和 节点所存储的数组传下去 deepTraversal(children[i],nodeList); &#125; return nodeList; &#125; var root = document.getElementById(&apos;root&apos;)console.log(deepTraversal(root,nodeList=[])) （2）这是深度优先算法的递归实现1234567891011121314151617function deepTraversal(node) &#123; var nodeList = []; if (node) &#123; var stack = []; stack.push(node); while (stack.length != 0) &#123; var childrenItem = stack.pop(); nodeList.push(childrenItem); var childrenList = childrenItem.children; for (var i = childrenList.length - 1; i &gt;= 0; i--) stack.push(childrenList[i]); &#125; &#125; return nodeList; &#125; var root = document.getElementById(&apos;root&apos;)console.log(deepTraversal(root)) 广度优先遍历当使用广度优先遍历的时候，先依次遍历兄弟节点，然后便利兄弟节点下的子节点结果一般为：广度优先遍历二叉树，也就是按层次的去遍历。依次遍历根节点，然后是左孩子和右孩子。所以要遍历完当前节点的所有孩子，。根据左右孩子的顺序来输出，所以就是先进先出的原则，那么我们当然就想到了队列这个数据结构： （1） 广度优先算法的的非递归实现1234567891011121314151617function wideTraversal(node) &#123; var nodes = []; if (node != null) &#123; var queue = []; queue.unshift(node); while (queue.length != 0) &#123; var item = queue.shift(); nodes.push(item); var children = item.children; for (var i = 0; i &lt; children.length; i++) queue.push(children[i]); &#125; &#125; return nodes; &#125;var root = document.getElementById(&apos;root&apos;);console.log(wideTraversal(root)); （2）广度优先遍历的递归实现 以后再补]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
